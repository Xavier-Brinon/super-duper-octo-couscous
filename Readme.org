#+title: EINTR
#+date: [2024-11-23 Sat]
#+description: Elisp Introduction
#+startup: indent
# #+property: header-args :results output

* Prep
I'm going to use a file *test.el* to run all the examples.
#+name: prep
#+begin_src emacs-lisp :tangle test.el
  ;;; package --- test file

  ;;; Commentary:
  ;; Generated file from readme.org

  ;;; Code:
#+end_src



* 1.1 Lisp lists
The *quote* ='= is to not interpret the list but to treat it /as-is/.

#+name: List
#+begin_src emacs-lisp :tangle test.el
  '(rose
    violet
    daisy
    buttercup)
#+end_src

#+RESULTS: List
| rose | violet | daisy | buttercup |

If there is no quote, the list gets evaluated.
#+name: list evaluation
#+begin_src emacs-lisp :tangle test.el
  (+ 2 2)
#+end_src

#+RESULTS: list evaluation
: 4

* 1.2 Program = Evaluating a list
The evaluation will do one of three things:
- Return the list itself (no evaluation per se)
- Return an error
- Call the function represented by the first item in the list

~C-x C-e~ :: call the evaluation of the expression

** Evaluating inner lists
Inner expressions are evaluated first. The value they return are used by the
outer expressions.

#+name: Inner loop evaluation
#+begin_src emacs-lisp :tangle test.el
  (+ 2 (+ 8 2))
#+end_src

#+RESULTS: Inner loop evaluation
: 12

* 1.7 Variables
Example of a variable using Emacs ~fill-column~. Evaluating / Executing gives
the value *bound* to that variable.

#+name: fill-column
#+begin_src emacs-lisp
  fill-column
#+end_src

#+RESULTS: fill-column
: 70

Variables and functions are treated differently. To evaluate a function, you put
it as first member of a list: ~(foo ...)~.
Evaluating foo by itself will only trigger an error: ~foo~

Evaluating of variables are the opposite. As firts element of a list, it will
throw an error: ~(fill-column ...)~

* Message
~message~ is sending the content of its arguments to the buffer area

#+name: message
#+begin_src emacs-lisp
  (message "This message appears in the echo area!")
#+end_src

#+RESULTS: message
: This message appears in the echo area!

=%s= is a string formatter
#+name: message-with-%s
#+begin_src emacs-lisp
     (message "The name of the buffer is %s" (buffer-name))
#+end_src

#+RESULTS: message-with-%s
: The name of the buffer is Readme.org

For numbers, use =%d=
#+name: message-with-%d
#+begin_src emacs-lisp
     (message "The value of fill-column is %d" fill-column)
#+end_src

#+RESULTS: message-with-%d
: The value of fill-column is 70

Actually, you can use ‘%s’ to print a number.  It is non-specific.  ‘%d’ prints
only the part of a number left of a decimal point, and not anything that is not
a number.

** 1.9 Setting values
